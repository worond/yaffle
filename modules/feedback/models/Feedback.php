<?php

namespace app\modules\feedback\models;

use app\modules\admin\components\ImageHelper;
use Yii;
use app\modules\file\models\File;
use app\modules\user\models\User;
use yii\db\ActiveRecord;


/**
 * This is the model class for table "tbl_feedback".
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $image_id
 * @property string $name
 * @property string $phone
 * @property string $email
 * @property string $subject
 * @property string $message
 * @property string $answer
 * @property string $created_at
 * @property integer $active
 * @property integer $viewed
 * @property string $url
 *
 * @property File $image
 * @property User $user
 */
class Feedback extends ActiveRecord
{
    use ImageHelper;

    public $imageFile;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%feedback}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'image_id', 'active', 'viewed'], 'integer'],
            [['email'], 'email'],
            [['email', 'phone'], 'orRequired'],
            [['message', 'answer'], 'string'],
            [['created_at'], 'safe'],
            [['name', 'phone', 'email', 'subject', 'url'], 'string', 'max' => 255],
            [['image_id'], 'exist', 'skipOnError' => true, 'targetClass' => File::className(), 'targetAttribute' => ['image_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    public function orRequired($attribute, $params)
    {
        if (empty($this->phone) && empty($this->email)) {
            $this->addError($attribute, 'Пожалуйста, заполните одно из полей.');
            return false;
        }
        return true;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'Пользователь',
            'image_id' => 'Изображение',
            'name' => 'Имя',
            'phone' => 'Телефон',
            'email' => 'Email',
            'subject' => 'Тема',
            'message' => 'Сообщение',
            'answer' => 'Ответ',
            'created_at' => 'Дата',
            'active' => 'Опубликовано',
            'viewed' => 'Просмотрено',
            'url' => 'Страница',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getImage()
    {
        return $this->hasOne(File::className(), ['id' => 'image_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            if (!$this->created_at) {
                $this->created_at = date('Y-m-d H:i:s');
            } else {
                if ($date = date_create_from_format('d.m.Y', $this->created_at)) {
                    $this->created_at = date_format($date, 'Y-m-d H:i:s');
                } else {
                    $this->created_at = $this->oldAttributes['created_at'];
                }
            }
        } else {
            $this->created_at = $this->oldAttributes['created_at'];
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        $this->created_at = date_format(date_create_from_format('Y-m-d H:i:s',$this->created_at),'d.m.Y H:i:s');
        parent::afterFind(); // TODO: Change the autogenerated stub
    }
}